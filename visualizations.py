import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from matplotlib.colors import Normalize
from matplotlib import animation 
from matplotlib import colormaps
import numpy as np

# Iteration 1
it1_sitters = [[1, 0, 0, 4.366868047733567, 0.8380250754811202, 1, 0, 3],
[2, 0, 0, 3.2855679224385153, 0.8088688807405053, 1, 0, 3],
[3, 0, 0, 4.536835892454481, 0.9678677066530504, 1, 0, 3],
[4, 0, 0, 4.716669336796192, 0.7307459528931386, 1, 0, 2],
[5, 0, 0, 5.819635932389323, 0.8448615995841176, 1, 0, 5],
[6, 0, 0, 5.564218456989441, 0.5057652818365794, 1, 0, 4],
[7, 0, 0, 3.3572084355665, 0.8673151431333823, 1, 0, 5],
[8, 0, 1, 6.434872281112462, 0.8926705806685121, 1, 2, 6],
[9, 0, 0, 4.822686299966329, 0.8599376135389856, 1, 0, 3],
[10, 0, 0, 5.033720536797324, 0.5473370775120368, 1, 0, 5]]

it1_tappers = [[1, 1, 0, 0, 7.140817085916204, 0.705503761941862, 0],
[2, 2, 0, 0, 3.6236729481261083, 0.549100734914765, 0],
[3, 3, 0, 0, 3.4413291834223636, 0.729566931812826, 0],
[4, 4, 0, 0, 4.585360599241556, 0.8654222953899718, 0],
[5, 5, 0, 0, 4.4400934457108825, 0.5559890772303884, 0],
[6, 6, 0, 0, 3.2503584004644397, 0.6391218197250945, 0],
[7, 7, 0, 0, 6.087393735499344, 0.824664740499192, 0],
[8, 8, 1, 0, 4.13771909764243, 0.6355272083789332, 2],
[9, 9, 0, 0, 4.950285792164071, 0.8444920145285144, 0],
[10, 10, 0, 0, 4.829236574234354, 0.9013211031090309, 0],
[11, -1, 0, 0, 3.903889901215183, 0.6262568357211478, 2]]

# Iteration #2
it2_sitters = [[1, 0, 0, 4.366868047733567, 0.8380250754811202, 1, 0, 2],
[2, 0, 0, 3.2855679224385153, 0.8088688807405053, 1, 0, 2],
[3, 0, 0, 4.536835892454481, 0.9678677066530504, 1, 0, 2],
[4, 1, 0, 4.716669336796192, 0.7307459528931386, 1, 2, 3],
[5, 0, 0, 5.819635932389323, 0.8448615995841176, 1, 0, 4],
[6, 0, 0, 5.564218456989441, 0.5057652818365794, 1, 0, 3],
[7, 0, 0, 3.3572084355665, 0.8673151431333823, 1, 0, 4],
[8, 0, 1, 6.434872281112462, 0.8926705806685121, 1, 2, 5],
[9, 0, 0, 4.822686299966329, 0.8599376135389856, 1, 0, 2],
[10, 0, 0, 5.033720536797324, 0.5473370775120368, 1, 0, 4]]

it2_tappers = [[1, 1, 0, 0, 7.140817085916204, 0.705503761941862, 0],
[2, 2, 0, 0, 3.6236729481261083, 0.549100734914765, 0],
[3, 3, 0, 0, 3.4413291834223636, 0.729566931812826, 0],
[4, -1, 0, 1, 4.585360599241556, 0.8654222953899718, 2],
[5, 5, 0, 0, 4.4400934457108825, 0.5559890772303884, 0],
[6, 6, 0, 0, 3.2503584004644397, 0.6391218197250945, 0],
[7, 7, 0, 0, 6.087393735499344, 0.824664740499192, 0],
[8, 8, 1, 0, 4.13771909764243, 0.6355272083789332, 2],
[9, 9, 0, 0, 4.950285792164071, 0.8444920145285144, 0],
[10, 10, 0, 0, 4.829236574234354, 0.9013211031090309, 0],
[11, 4, 0, 0, 3.903889901215183, 0.6262568357211478, 4]]

# Iteration #3
it3_sitters = [
[1, 0, 0, 4.366868047733567, 0.8380250754811202, 1, 0, 1],
[2, 1, 0, 3.2855679224385153, 0.8088688807405053, 1, 2, 4],
[3, 0, 0, 4.536835892454481, 0.9678677066530504, 1, 0, 1],
[4, 1, 0, 4.716669336796192, 0.7307459528931386, 1, 2, 2],
[5, 0, 0, 5.819635932389323, 0.8448615995841176, 1, 0, 3],
[6, 0, 0, 5.564218456989441, 0.5057652818365794, 1, 0, 2],
[7, 0, 0, 3.3572084355665, 0.8673151431333823, 1, 0, 3],
[8, 0, 1, 6.434872281112462, 0.8926705806685121, 1, 2, 4],
[9, 0, 0, 4.822686299966329, 0.8599376135389856, 1, 0, 1],
[10, 0, 0, 5.033720536797324, 0.5473370775120368, 1, 0, 3]
]

it3_tappers = [
[1, 1, 0, 0, 7.140817085916204, 0.705503761941862, 0],
[2, -1, 0, 1, 3.6236729481261083, 0.549100734914765, 2],
[3, 3, 0, 0, 3.4413291834223636, 0.729566931812826, 0],
[4, 2, 0, 1, 4.585360599241556, 0.8654222953899718, 4],
[5, 5, 0, 0, 4.4400934457108825, 0.5559890772303884, -1],
[6, 6, 0, 0, 3.2503584004644397, 0.6391218197250945, -1],
[7, 7, 0, 0, 6.087393735499344, 0.824664740499192, 0],
[8, 8, 1, 0, 4.13771909764243, 0.6355272083789332, 2],
[9, 9, 0, 0, 4.950285792164071, 0.8444920145285144, 0],
[10, 10, 0, 0, 4.829236574234354, 0.9013211031090309, 0],
[11, 4, 0, 0, 3.903889901215183, 0.6262568357211478, 4]
]

# Iteration #4
it4_sitters = [
[1, 0, 0, 4.366868047733567, 0.8380250754811202, 1, -1, 0],
[2, 1, 0, 3.2855679224385153, 0.8088688807405053, 1, 2, 3],
[3, 1, 0, 4.536835892454481, 0.9678677066530504, 1, 2, 4],
[4, 1, 0, 4.716669336796192, 0.7307459528931386, 1, 2, 1],
[5, 0, 0, 5.819635932389323, 0.8448615995841176, 1, 0, 2],
[6, 0, 0, 5.564218456989441, 0.5057652818365794, 1, 0, 1],
[7, 0, 0, 3.3572084355665, 0.8673151431333823, 1, 0, 2],
[8, 0, 1, 6.434872281112462, 0.8926705806685121, 1, 2, 3],
[9, 0, 0, 4.822686299966329, 0.8599376135389856, 1, -1, 0],
[10, 0, 0, 5.033720536797324, 0.5473370775120368, 1, 0, 2]
]

it4_tappers = [
[1, 1, 0, 0, 7.140817085916204, 0.705503761941862, 0],
[2, 3, 0, 1, 3.6236729481261083, 0.549100734914765, 4],
[3, -1, 0, 1, 3.4413291834223636, 0.729566931812826, 2],
[4, 2, 0, 1, 4.585360599241556, 0.8654222953899718, 4],
[5, 5, 0, 0, 4.4400934457108825, 0.5559890772303884, -2],
[6, 6, 0, 0, 3.2503584004644397, 0.6391218197250945, -2],
[7, 7, 0, 0, 6.087393735499344, 0.824664740499192, 0],
[8, 8, 1, 0, 4.13771909764243, 0.6355272083789332, 2],
[9, 9, 0, 0, 4.950285792164071, 0.8444920145285144, -1],
[10, 10, 0, 0, 4.829236574234354, 0.9013211031090309, 0],
[11, 4, 0, 0, 3.903889901215183, 0.6262568357211478, 4]

]

# Iteration #5
it5_sitters = [
[1, 0, 0, 4.366868047733567, 0.8380250754811202, 1, -2, 0],
[2, 1, 0, 3.2855679224385153, 0.8088688807405053, 1, 2, 2],
[3, 1, 0, 4.536835892454481, 0.9678677066530504, 1, 2, 3],
[4, 2, 0, 4.716669336796192, 0.7307459528931386, 1, 4, 3],
[5, 0, 0, 5.819635932389323, 0.8448615995841176, 1, 0, 1],
[6, 0, 0, 5.564218456989441, 0.5057652818365794, 1, -1, 0],
[7, 0, 0, 3.3572084355665, 0.8673151431333823, 1, 0, 1],
[8, 0, 1, 6.434872281112462, 0.8926705806685121, 1, 2, 2],
[9, 0, 0, 4.822686299966329, 0.8599376135389856, 1, -2, 0],
[10, 0, 0, 5.033720536797324, 0.5473370775120368, 1, 0, 1]
]

it5_tappers = [
[1, 1, 0, 0, 7.140817085916204, 0.705503761941862, -1],
[2, 3, 0, 1, 3.6236729481261083, 0.549100734914765, 4],
[3, 4, 0, 1, 3.4413291834223636, 0.729566931812826, 4],
[4, 2, 0, 1, 4.585360599241556, 0.8654222953899718, 4],
[5, 5, 0, 0, 4.4400934457108825, 0.5559890772303884, -3],
[6, 6, 0, 0, 3.2503584004644397, 0.6391218197250945, -3],
[7, 7, 0, 0, 6.087393735499344, 0.824664740499192, 0],
[8, 8, 1, 0, 4.13771909764243, 0.6355272083789332, 1],
[9, 9, 0, 0, 4.950285792164071, 0.8444920145285144, -2],
[10, 10, 0, 0, 4.829236574234354, 0.9013211031090309, 0],
[11, -1, 0, 1, 3.903889901215183, 0.6262568357211478, 6]
]

# Iteration #6
it6_sitters = [[1, 0, 0, 4.366868047733567, 0.8380250754811202, 1, -3, 0],
[2, 1, 0, 3.2855679224385153, 0.8088688807405053, 1, 2, 1],
[3, 1, 0, 4.536835892454481, 0.9678677066530504, 1, 2, 2],
[4, 2, 0, 4.716669336796192, 0.7307459528931386, 1, 4, 2],
[5, 1, 0, 5.819635932389323, 0.8448615995841176, 1, 2, 6],
[6, 0, 0, 5.564218456989441, 0.5057652818365794, 1, -2, 0],
[7, 0, 0, 3.3572084355665, 0.8673151431333823, 1, -1, 0],
[8, 0, 1, 6.434872281112462, 0.8926705806685121, 1, 2, 1],
[9, 0, 0, 4.822686299966329, 0.8599376135389856, 1, -3, 0],
[10, 0, 0, 5.033720536797324, 0.5473370775120368, 1, -1, 0]]

it6_tappers = [[1, 1, 0, 0, 7.140817085916204, 0.705503761941862, -2],
[2, 3, 0, 1, 3.6236729481261083, 0.549100734914765, 4],
[3, 4, 0, 1, 3.4413291834223636, 0.729566931812826, 4],
[4, 2, 0, 1, 4.585360599241556, 0.8654222953899718, 4],
[5, -1, 0, 1, 4.4400934457108825, 0.5559890772303884, -1],
[6, 6, 0, 0, 3.2503584004644397, 0.6391218197250945, -4],
[7, 7, 0, 0, 6.087393735499344, 0.824664740499192, -1],
[8, 8, 1, 0, 4.13771909764243, 0.6355272083789332, 0],
[9, 9, 0, 0, 4.950285792164071, 0.8444920145285144, -3],
[10, 10, 0, 0, 4.829236574234354, 0.9013211031090309, -1],
[11, 5, 0, 1, 3.903889901215183, 0.6262568357211478, 8]]

# Iteration #7
it7_sitters = [
[1, 0, 0, 4.366868047733567, 0.8380250754811202, 1, -4, 0],
[2, 1, 0, 3.2855679224385153, 0.8088688807405053, 1, 1, 0],
[3, 2, 0, 4.536835892454481, 0.9678677066530504, 1, 4, 4],
[4, 2, 0, 4.716669336796192, 0.7307459528931386, 1, 4, 1],
[5, 1, 0, 5.819635932389323, 0.8448615995841176, 1, 2, 5],
[6, 0, 0, 5.564218456989441, 0.5057652818365794, 1, -3, 0],
[7, 0, 0, 3.3572084355665, 0.8673151431333823, 1, -2, 0],
[8, 0, 1, 6.434872281112462, 0.8926705806685121, 1, 1, 0],
[9, 0, 0, 4.822686299966329, 0.8599376135389856, 1, -4, 0],
[10, 0, 0, 5.033720536797324, 0.5473370775120368, 1, -2, 0]
]

it7_tappers = [[1, 1, 0, 0, 7.140817085916204, 0.705503761941862, -3],
[2, -1, 0, 2, 3.6236729481261083, 0.549100734914765, 6],
[3, 4, 0, 1, 3.4413291834223636, 0.729566931812826, 4],
[4, 2, 0, 1, 4.585360599241556, 0.8654222953899718, 4],
[5, 3, 0, 1, 4.4400934457108825, 0.5559890772303884, 1],
[6, 6, 0, 0, 3.2503584004644397, 0.6391218197250945, -5],
[7, 7, 0, 0, 6.087393735499344, 0.824664740499192, -2],
[8, 8, 1, 0, 4.13771909764243, 0.6355272083789332, -1],
[9, 9, 0, 0, 4.950285792164071, 0.8444920145285144, -4],
[10, 10, 0, 0, 4.829236574234354, 0.9013211031090309, -2],
[11, 5, 0, 1, 3.903889901215183, 0.6262568357211478, 8]
]

# Iteration #8
it8_sitters = [[1, 0, 0, 4.366868047733567, 0.8380250754811202, 1, -5, 0],
[2, 1, 0, 3.2855679224385153, 0.8088688807405053, 1, 0, 0],
[3, 2, 0, 4.536835892454481, 0.9678677066530504, 1, 4, 3],
[4, 2, 0, 4.716669336796192, 0.7307459528931386, 1, 3, 0],
[5, 2, 0, 5.819635932389323, 0.8448615995841176, 1, 4, 6],
[6, 0, 0, 5.564218456989441, 0.5057652818365794, 1, -4, 0],
[7, 0, 0, 3.3572084355665, 0.8673151431333823, 1, -3, 0],
[8, 0, 1, 6.434872281112462, 0.8926705806685121, 1, 0, 0],
[9, 0, 0, 4.822686299966329, 0.8599376135389856, 1, -5, 0],
[10, 0, 0, 5.033720536797324, 0.5473370775120368, 1, -3, 0]]

it8_tappers = [[1, 1, 0, 0, 7.140817085916204, 0.705503761941862, -4],
[2, 5, 0, 2, 3.6236729481261083, 0.549100734914765, 8],
[3, 4, 0, 1, 3.4413291834223636, 0.729566931812826, 4],
[4, 2, 0, 1, 4.585360599241556, 0.8654222953899718, 4],
[5, 3, 0, 1, 4.4400934457108825, 0.5559890772303884, 1],
[6, 6, 0, 0, 3.2503584004644397, 0.6391218197250945, -6],
[7, 7, 0, 0, 6.087393735499344, 0.824664740499192, -3],
[8, 8, 1, 0, 4.13771909764243, 0.6355272083789332, -2],
[9, 9, 0, 0, 4.950285792164071, 0.8444920145285144, -5],
[10, 10, 0, 0, 4.829236574234354, 0.9013211031090309, -3],
[11, -1, 0, 2, 3.903889901215183, 0.6262568357211478, 10]]

# Iteration #9
it9_sitters = [[1, 0, 0, 4.366868047733567, 0.8380250754811202, 1, -6, 0],
[2, 1, 0, 3.2855679224385153, 0.8088688807405053, 1, -1, 0],
[3, 3, 0, 4.536835892454481, 0.9678677066530504, 1, 6, 4],
[4, 2, 0, 4.716669336796192, 0.7307459528931386, 1, 2, 0],
[5, 2, 0, 5.819635932389323, 0.8448615995841176, 1, 4, 5],
[6, 0, 0, 5.564218456989441, 0.5057652818365794, 1, -5, 0],
[7, 0, 0, 3.3572084355665, 0.8673151431333823, 1, -4, 0],
[8, 0, 1, 6.434872281112462, 0.8926705806685121, 1, -1, 0],
[9, 0, 0, 4.822686299966329, 0.8599376135389856, 1, -6, 0],
[10, 0, 0, 5.033720536797324, 0.5473370775120368, 1, -4, 0]]

it9_tappers = [[2, 5, 0, 2, 3.6236729481261083, 0.549100734914765, 8],
[3, 4, 0, 1, 3.4413291834223636, 0.729566931812826, 4],
[4, 2, 0, 1, 4.585360599241556, 0.8654222953899718, 3],
[5, -1, 0, 2, 4.4400934457108825, 0.5559890772303884, 3],
[6, 6, 0, 0, 3.2503584004644397, 0.6391218197250945, -7],
[7, 7, 0, 0, 6.087393735499344, 0.824664740499192, -4],
[8, 8, 1, 0, 4.13771909764243, 0.6355272083789332, -3],
[9, 9, 0, 0, 4.950285792164071, 0.8444920145285144, -6],
[10, 10, 0, 0, 4.829236574234354, 0.9013211031090309, -4],
[11, 3, 0, 2, 3.903889901215183, 0.6262568357211478, 12]]

# Iteration #10
it10_sitters = [
[1, 0, 0, 4.366868047733567, 0.8380250754811202, 1, -7, 0],
[2, 1, 0, 3.2855679224385153, 0.8088688807405053, 1, -2, 0],
[3, 3, 0, 4.536835892454481, 0.9678677066530504, 1, 6, 3],
[4, 2, 0, 4.716669336796192, 0.7307459528931386, 1, 1, 0],
[5, 2, 0, 5.819635932389323, 0.8448615995841176, 1, 4, 4],
[6, 0, 0, 5.564218456989441, 0.5057652818365794, 1, -6, 0],
[7, 0, 0, 3.3572084355665, 0.8673151431333823, 1, -5, 0],
[8, 0, 1, 6.434872281112462, 0.8926705806685121, 1, -2, 0],
[9, 0, 0, 4.822686299966329, 0.8599376135389856, 1, -7, 0],
[10, 0, 1, 5.033720536797324, 0.5473370775120368, 1, -2, 6]
]

it10_tappers = [
[1, 1, 0, 0, 7.140817085916204, 0.705503761941862, -6],
[2, 5, 0, 2, 3.6236729481261083, 0.549100734914765, 8],
[3, 4, 0, 1, 3.4413291834223636, 0.729566931812826, 4],
[4, 2, 0, 1, 4.585360599241556, 0.8654222953899718, 2],
[5, -1, 0, 2, 4.4400934457108825, 0.5559890772303884, 5],
[6, 6, 0, 0, 3.2503584004644397, 0.6391218197250945, -8],
[7, 7, 0, 0, 6.087393735499344, 0.824664740499192, -5],
[8, 8, 1, 0, 4.13771909764243, 0.6355272083789332, -4],
[9, 9, 0, 0, 4.950285792164071, 0.8444920145285144, -7],
[10, 10, 1, 0, 4.829236574234354, 0.9013211031090309, -2],
[11, 3, 0, 2, 3.903889901215183, 0.6262568357211478, 12],
]

""" # Visualization #1 - Starting Escapability vs Tapability
start_tap = [sublist[4] for sublist in it1_tappers]
start_escape = [sublist[3] for sublist in it1_sitters]

data = [start_tap, start_escape]
labels = ['Starting Tapability', 'Starting Escapability']

# Create the plot
fig, ax = plt.subplots(figsize=(8, 4))
for i, d in enumerate(data):
    # Add some jitter to the y-position to avoid overlapping points
    jittered_y = np.random.normal(i + 1, 0.05, size=len(d))
    ax.scatter(d, jittered_y, alpha=0.8)

# Customize the axes
ax.set_xlim(1, 10) 
ax.set_yticks(range(1, len(data) + 1))
ax.set_yticklabels(labels)
ax.set_xlabel('Values')
ax.set_title('Starting Tapability and Escapability')

# Show the plot
plt.tight_layout()
plt.show() """

""" # Visualization 2 - Fun Over Time
fun1 = [sublist[6] for sublist in it1_sitters]
fun2 = [sublist[6] for sublist in it2_sitters]
fun3 = [sublist[6] for sublist in it3_sitters]
fun4 = [sublist[6] for sublist in it4_sitters]
fun5 = [sublist[6] for sublist in it5_sitters]
fun6 = [sublist[6] for sublist in it6_sitters]
fun7 = [sublist[6] for sublist in it7_sitters]
fun8 = [sublist[6] for sublist in it8_sitters]
fun9 = [sublist[6] for sublist in it9_sitters]
fun10 = [sublist[6] for sublist in it10_sitters]

iterations = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
categories = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
values = [
    fun1, fun2, fun3, fun4, fun4, fun5, fun6, fun7, fun8, fun9, fun10
]

# Initialize Figure
fig, ax = plt.subplots()
bars = ax.bar(categories, values[0])

# Set axis limits
ax.set_ylim(-10, max(max(values)) + 5)
ax.set_title("Category Values Over Time")
ax.set_ylabel("Value")
ax.set_xlabel("Sitter")

# Update function for animation
def update(frame):
    for bar, val in zip(bars, values[frame]):
        bar.set_height(val)
    ax.set_title(f"Fun Values in Iteration: {iterations[frame]}")

# Animate
ani = FuncAnimation(fig, update, frames=len(iterations), repeat=True, interval=700)
ani.save("Visual2.mp4", writer=animation.FFMpegWriter(fps=5)) """


""" # Visulization #3 - Who is Winked At
# [8, 4, 2, 3, 4, 5, 3, 5, 3, 10]

n_people = 10

# Generate circular coordinates to place dots
angles = np.linspace(0, 2 * np.pi, n_people, endpoint=False)
radius = 1  # Fixed radius for the circle
x_coords = radius * np.cos(angles)
y_coords = radius * np.sin(angles)

# Initialize heat values (0 for all dots initially)
heat_values = np.zeros(n_people)

# People Chosen
update_sequence = [8, 4, 2, 3, 4, 5, 3, 5, 3, 10]  # Sitters chosen in order throughout game

# Set up the figure and plot
fig, ax = plt.subplots(figsize=(6, 6))
cmap = plt.cm.Blues  # Define colormap
norm = Normalize(vmin=0, vmax=1)  # Normalize heat values to the range [0, 1]

# Initial scatter plot
scatter = ax.scatter(
    x_coords, y_coords,
    c=cmap(norm(heat_values)),  # Initial color values
    s=200, edgecolor='black'
)

# Add labels for each dot with offset positions to avoid overlap with dots
label_offset = 0.05
for i, (x, y) in enumerate(zip(x_coords, y_coords)):
    ax.annotate(
        str(i + 1),
        (x + label_offset, y + label_offset),
        color='black',
        fontsize=10,
        ha='center',
        va='center',
        zorder=3,
    )

# Title and layout adjustments
ax.set_title("Chosen Sitters Throughout Game Progression")
ax.axis('off')

# Function to update heat values
def update_heat_values(person_index):
    heat_values[person_index] += 0.3  # Increment heat for the specified dot
    heat_values[person_index] = min(heat_values[person_index], 1)  # Cap at 1.0

# Animation update function
def update(frame):
    if frame == 0:
        # Initial frame: do not update heat values
        scatter.set_facecolor(cmap(norm(heat_values)))
    else:
        # Update the heat values for the person in the sequence
        person_to_update = update_sequence[frame - 1]  # Subtract 1 for zero-based indexing
        update_heat_values(person_to_update - 1)
        scatter.set_facecolor(cmap(norm(heat_values)))
    return scatter,

# Create the animation
ani = FuncAnimation(
    fig, update, frames=len(update_sequence) + 1, interval=1100, blit=False
)

# Save the animation
ani.save("Visual3.mp4", writer=animation.FFMpegWriter(fps=2)) """


# Visualization #4 and #5 - Escape Rate vs Tap Rate

""" # Visualization for Sitters
num_escape_sit = [sublist [1] for sublist in it10_sitters]
num_tap_sit = [sublist[2] for sublist in it10_sitters]

# Create an array with the positions of the bars
indices = np.arange(len(num_escape_sit))

# Set the width of the bars
bar_width = 0.35

# Plot the bars
plt.bar(indices, num_escape_sit, bar_width, label='Number of Times Escaped', color='b')
plt.bar(indices + bar_width, num_tap_sit, bar_width, label='Number of Times Tapped', color='g')

# Add labels and title
plt.xlabel('Sitter')
plt.ylabel('Values')
plt.title('Number of Times Tapped and Escaped')
plt.xticks(indices + bar_width / 2, indices + 1) 
plt.legend()

# Show the plot
plt.tight_layout()
plt.show() """

""" # Visualization for Tappers
num_escape_tap = [sublist [3] for sublist in it10_tappers]
num_tap_tap = [sublist[2] for sublist in it10_tappers]

# Create an array with the positions of the bars
indices = np.arange(len(num_escape_tap))

# Set the width of the bars
bar_width = 0.35

# Plot the bars
plt.bar(indices, num_escape_tap, bar_width, label='Number of Times Escaped', color='b')
plt.bar(indices + bar_width, num_tap_tap, bar_width, label='Number of Times Tapped', color='g')

# Add labels and title
plt.xlabel('Tapper')
plt.ylabel('Values')
plt.title('Number of Times Tapped and Escaped')
plt.xticks(indices + bar_width / 2, indices + 1) 
plt.legend()

# Show the plot
plt.tight_layout()
plt.show()  """

# Visualization #6 - Animation of Sitter Chosen
numbers = [8, 4, 2, 3, 4, 5, 3, 5, 3, 10]
count = [0] * 10

# Create the figure and axis
fig, ax = plt.subplots()

# Set up the bars for numbers 1 to 10
bars = ax.bar(np.arange(1, 11), count, color='skyblue')

# Set fixed y-axis limit from 0 to 10
ax.set_ylim(0, 10)

# Set labels and title
ax.set_xlabel('Sitter')
ax.set_ylabel('Times Winked At')
ax.set_title('Sitters Winked At')
ax.set_xticks(np.arange(1, 11))

# Ensure update is only called once per frame
def update(frame):
    # Increment the count for the current number
    number = numbers[frame]
    count[number - 1] += 1


    # Update the bars
    for i, bar in enumerate(bars):
        bar.set_height(count[i])

    # Update the title to show progress
    ax.set_title(f'Sitters winked At: Iteration {frame + 1}/{len(numbers)}')

# Create the animation with `init_func` to ensure consistent initialization
def init():
    # Reset all counts and bars to zero
    for bar in bars:
        bar.set_height(0)
    ax.set_title('Sitters Winked At')
    return bars

ani = FuncAnimation(fig, update, frames=len(numbers), init_func=init, interval=1100, repeat=False)
ani.save("Visual6.mp4", writer=animation.FFMpegWriter(fps=2))

# Display the plot
plt.tight_layout()
plt.show() 